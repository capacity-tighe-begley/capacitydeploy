<#
.SYNOPSIS
    --.
.DESCRIPTION
    SuccessSetupDiag.ps1, triggered by Success.cmd
    Application Checking PreFlight script to confirm some applications are at specific levels, or the script will fail the upgrade out early, making reporting easier.

    Update the $AppChecks variable to check for additional apps. Add as many versions as you want to "Approve" to be allowed
.INPUTS
    None.
.OUTPUTS
    None.
.NOTES
    Created by @gwblok
.LINK
    https://garytown.com
.LINK
    https://www.recastsoftware.com
.COMPONENT
    --
.FUNCTIONALITY
    --
#>

## Set script requirements
#Requires -Version 3.0

##*=============================================
##* VARIABLE DECLARATION
##*=============================================
#region VariableDeclaration

#Registry Path that will get Tagged
$registryPath = "HKLM:\SOFTWARE\WaaS"
$TimeStamp = Get-Date -f s
$keynameStart = "CA_SuccessSetupDiag_Start"
$keynameFinish = "CA_SuccessSetupDiag_Finish"
New-ItemProperty -Path $registryPath -Name $keynameStart -Value $TimeStamp -Force


#Logfile generated by this script
$WaaSFolder = "$($env:ProgramData)\WaaS"
$logfile = "$WaaSFolder\CustomActions.log"



## Get script path and name
[string]$ScriptPath = [System.IO.Path]::GetDirectoryName($MyInvocation.MyCommand.Definition)
[string]$ScriptName = [System.IO.Path]::GetFileNameWithoutExtension($MyInvocation.MyCommand.Definition)

#endregion
##*=============================================
##* END VARIABLE DECLARATION
##*=============================================

##*=============================================
##* FUNCTION LISTINGS
##*=============================================
#region FunctionListings

#region: CMTraceLog Function formats logging in CMTrace style
        function CMTraceLog {
         [CmdletBinding()]
    Param (
		    [Parameter(Mandatory=$false)]
		    $Message,
 
		    [Parameter(Mandatory=$false)]
		    $ErrorMessage,
 
		    [Parameter(Mandatory=$false)]
		    $Component = "SetupDiag",
 
		    [Parameter(Mandatory=$false)]
		    [int]$Type,
		
		    [Parameter(Mandatory=$true)]
		    $LogFile
	    )
    <#
    Type: 1 = Normal, 2 = Warning (yellow), 3 = Error (red)
    #>
	    $Time = Get-Date -Format "HH:mm:ss.ffffff"
	    $Date = Get-Date -Format "MM-dd-yyyy"
 
	    if ($ErrorMessage -ne $null) {$Type = 3}
	    if ($Component -eq $null) {$Component = " "}
	    if ($Type -eq $null) {$Type = 1}
 
	    $LogMessage = "<![LOG[$Message $ErrorMessage" + "]LOG]!><time=`"$Time`" date=`"$Date`" component=`"$Component`" context=`"`" type=`"$Type`" thread=`"`" file=`"`">"
	    $LogMessage | Out-File -Append -Encoding UTF8 -FilePath $LogFile
    }
##*=============================================
##* END FUNCTION LISTINGS
##*=============================================

##*=============================================
##* SCRIPT BODY
##*=============================================
#region ScriptBody

#Confirm LogFile Folder
if (!(Test-Path $WaaSFolder)){$NewFolder = new-item -Path $WaaSFolder -ItemType Directory -Force}
CMTraceLog -Message  "--------------------------" -Type 1 -LogFile $LogFile
CMTraceLog -Message  "Starting $ScriptName" -Type 1 -LogFile $LogFile


#Running SetupDiag and capturing Results for Reporting

CMTraceLog -Message  "Waiting for Setup to End to Run Diag" -Type 1 -LogFile $LogFile
$Minutes = 1
DO
    {
    Start-Sleep -Seconds 60
    CMTraceLog -Message  "Waiting $Minutes Minutes for Setup Engine to Finish" -Type 1 -LogFile $LogFile
    $Minutes += 1
    if ($Minutes -eq 15)
        {
        CMTraceLog -Message  "Waited $Minutes Minutes, exiting script with Exit 15, I'm tired of waiting" -Type 3 -LogFile $LogFile
        $TimeStamp = Get-Date -f s
        New-ItemProperty -Path $registryPath -Name $keynameFinish -Value $TimeStamp -Force
        exit 15
        }
    }
Until (Test-Path -path 'c:\Windows.old\$WINDOWS.~BT\Sources\SetupDiag.exe')

if (Test-Path -path 'c:\Windows.old\$WINDOWS.~BT\Sources\SetupDiag.exe'){$SetupDiagPath = 'c:\Windows.old\$WINDOWS.~BT\Sources\SetupDiag.exe'}

if (Test-Path -path $SetupDiagPath)
    {
    $LocalWaaSPathSetupDiag = "$env:ProgramData\WaaS\SetupDiag"
    if (!(Test-Path -Path $LocalWaaSPathSetupDiag)){New-Item -Path $LocalWaaSPathSetupDiag -ItemType Directory -Force}

    CMTraceLog -Message  "Found SetupDiag Here: $SetupDiagPath" -Type 1 -LogFile $LogFile
    $Process = "$SetupDiagPath"
    $RegPath = "HKEY_LOCAL_MACHINE\SOFTWARE\WaaS\SetupDiag\LatestRun"
    $Arg = "/RegPath:$($RegPath) /Output:$($LocalWaaSPathSetupDiag)\Results.xml /Format:xml"
    
    CMTraceLog -Message  "Starting $Process  $Arg" -Type 1 -LogFile $LogFile
    Write-Output "Starting $Process  $Arg"
    Start-Process $Process -ArgumentList $Arg
    
    #Monitor SetupDiag
    $Seconds = 30
    

    Write-Output "Monitoring SetupDiag Process every $Seconds seconds"
    DO
        {
        if(Get-Process "SetupDiag" -ErrorAction SilentlyContinue)
            {
            Write-Output "    Setup Diag Running"
            $RuningSetupDiag = $true
            Start-Sleep -Seconds $Seconds
            }
        Else
            {
            Write-Output "  Setup Diag Finished"
            $RuningSetupDiag = $false
            }
        } Until ($RuningSetupDiag -eq $false)
    Write-Output "SetupDiag Process Complete"
    #Rename Setup Diag Key to Build Number for Historical Reasons.
    Write-Output "Rename Registry Export to Build Number"
    if (Test-Path -Path "HKLM:\Software\WaaS\SetupDiag\LatestRun")
        {
        $SetupDiagKey = get-item -Path "HKLM:\Software\WaaS\SetupDiag\LatestRun"
        $SetupElapsedTime = $SetupDiagKey.GetValue("UpgradeElapsedTime")
        [int]$SetupElapsedTimeHours = $SetupElapsedTime.Split(":")[0]
        [int]$SetupElapsedTimeMinutes = $SetupElapsedTime.Split(":")[1]
        $SetupElapsedTimeTotalMinutes = $SetupElapsedTimeHours * 60 + $SetupElapsedTimeMinutes
        $TargetOSVersion = $SetupDiagKey.GetValue("TargetOSVersion")
        $SetupDiagBuild = ($TargetOSVersion.Split(" ")[0]).split(".")[2]
        if (test-path "HKLM:\Software\WaaS\SetupDiag\$SetupDiagBuild"){Remove-Item -path "HKLM:\Software\WaaS\SetupDiag\$SetupDiagBuild"}
        Rename-Item -Path "HKLM:\Software\WaaS\SetupDiag\LatestRun" -NewName $SetupDiagBuild -Force
        Write-Output "Registry Path: HKLM:\Software\WaaS\SetupDiag\$SetupDiagBuild"
        CMTraceLog -Message  "SetupDiag Results Path: HKLM:\Software\WaaS\SetupDiag\$SetupDiagBuild" -Type 1 -LogFile $LogFile
        }
    }
else
    {
    CMTraceLog -Message  "SetupDiag.exe NOT FOUND" -Type 2 -LogFile $LogFile
    }
        

$TimeStamp = Get-Date -f s
New-ItemProperty -Path $registryPath -Name $keynameFinish -Value $TimeStamp -Force
CMTraceLog -Message  "Finished $ScriptName" -Type 1 -LogFile $LogFile
exit $exitcode
#endregion
##*=============================================
##* END SCRIPT BODY
##*=============================================